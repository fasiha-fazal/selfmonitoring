/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */

template Service "generic-service" {
  max_check_attempts = 3
  check_interval = 1m
  retry_interval = 30s
}

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint
}


apply Service "disk" {
  import "generic-service"
  check_command = "disk"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}

apply Service "cluster" {
  import "generic-service"

  check_command = "cluster"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint
}

apply Service "load" {
  import "generic-service"
  check_command = "load"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles) 
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint
}

apply Service "users" {
  import "generic-service"
  check_command = "users"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}

apply Service "cpu" {
  import "generic-service"
  check_command = "check_cpu"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}

apply Service "icinga_procs" {
  import "generic-service"
  check_command = "check_icinga_procs"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint  && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}

apply Service "grafana_procs" {
  import "generic-service"
  check_command = "check_grafana_procs"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("grafana" in host.vars.node_roles)
}

apply Service "memory" {
  import "generic-service"

  check_command = "mem"
  command_endpoint = host.vars.client_endpoint
  vars.mem_used = true
  vars.mem_free = false
  vars.mem_cache = true
  vars.mem_warning = 80
  vars.mem_critical = 85
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}
apply Service "iostat" {
  import "generic-service"

  check_command = "iostat"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles)
}
apply Service "ido" {
  import "generic-service"

  check_command = "ido"
  command_endpoint = host.vars.client_endpoint
  vars.ido_type = "IdoMysqlConnection"
  vars.ido_name = "ido-mysql"
  assign where host.vars.client_endpoint && "master" in host.vars.node_roles
}


apply Service "interface" {
  import "generic-service"
  check_command = "check_eth"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint && ("master" in host.vars.node_roles || "satellite" in host.vars.node_roles) 
}

apply Service "disk" {
  import "generic-service"

  check_command = "nrpe_check_disk"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles)
}


apply Service "db_uptime"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "uptime"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_connection-time"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "connection-time"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_threadcache-hitrate"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "threadcache-hitrate"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_querycache-hitrate"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "querycache-hitrate"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_querycache-lowmem-prunes"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "querycache-lowmem-prunes"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_myisam-keycache-hitrate"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "myisam-keycache-hitrate"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_innodb-bufferpool-hitrate"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "innodb-bufferpool-hitrate"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_innodb-bufferpool-wait-free"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "innodb-bufferpool-wait-free"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_innodb-log-waits"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "innodb-log-waits"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_tablecache-hitrate"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "tablecache-hitrate"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_table-lock-contention"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "table-lock-contention"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_index-usage"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "index-usage"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_tmp-disk-tables"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "tmp-disk-tables"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_slow-queries"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "slow-queries"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_long-running-procs"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "long-running-procs"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}



apply Service "db_open-files"{
  import "generic-service"

  check_command = "mysql_health"
  vars.mysql_health_mode = "open-files"
  vars.mysql_health_username = host.vars.username
  vars.mysql_health_password = host.vars.password
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}

apply Service "db_mysql-cluster-connection" {
  import "generic-service"

  check_command = "mysql_connection"
  vars.mysql_crit = "1"
  vars.mysql_password = host.vars.password
  vars.mysql_username = host.vars.username
  vars.mysql_warn = "1"
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}


apply Service "db_mysql-status" {
  import "generic-service"

  check_command = "mysql"
  vars.mysql_database = "icinga"
  vars.mysql_password = host.vars.password
  vars.mysql_port = "3306"
  vars.mysql_username = host.vars.username
  assign where "T9Host" in host.templates && "mysql" in host.vars.node_roles
}

apply Service "graphite_status" {
  import "generic-service"

  check_command = "nrpe_check_graphite_service"
  assign where "T9Host" in host.templates && "graphite" in host.vars.node_roles
}


apply Service "icinga2_api_status" {
  import "generic-service"

  check_command = "http"
  vars.http_ssl = true
  vars.http_port = "5665"
  vars.http_auth_pair="monitoring:d22c4fd22c4f"
  vars.http_ignore_body = true
  vars.http_uri = "/v1"
  assign where "T9Host" in host.templates && "master" in host.vars.node_roles
}

apply Service "apache_status"{
  import "generic-service"

  check_command = "apache-status"
  assign where "T9Host" in host.templates && "apache" in host.vars.node_roles

}


apply Service "load" {
  import "generic-service"
  check_command = "nrpe_check_load"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles)
}

apply Service "memory" {
  import "generic-service"
  check_command = "nrpe_check_memory"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles)
}

apply Service "iostat" {
  import "generic-service"
  check_command = "nrpe_check_iostat"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles)
}

apply Service "users" {
  import "generic-service"
  check_command = "nrpe_check_users"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles )
}

apply Service "procs" {
  import "generic-service"
  check_command = "nrpe_check_procs"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles )
}

apply Service "eth" {
  import "generic-service"
  check_command = "nrpe_check_eth"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles )
}

apply Service "cpu" {
  import "generic-service"
  check_command = "nrpe_check_cpu"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles )
}


apply Service "mysql_procs" {
  import "generic-service"
  check_command = "nrpe_check_mysql_procs"
  assign where "T9Host" in host.templates && ("mysql" in host.vars.node_roles )
}


apply Service "carbon_cache" {
  import "generic-service"
  check_command = "nrpe_check_carbon_cache"
  assign where "T9Host" in host.templates && ("graphite" in host.vars.node_roles )
}


apply Service "carbon_relay" {
  import "generic-service"
  check_command = "nrpe_check_carbon_relay"
  assign where "T9Host" in host.templates && ("graphite" in host.vars.node_roles )
}

apply Service "graphite_procs" {
  import "generic-service"
  check_command = "nrpe_check_graphite_procs"
  assign where "T9Host" in host.templates && ("graphite" in host.vars.node_roles )
}


